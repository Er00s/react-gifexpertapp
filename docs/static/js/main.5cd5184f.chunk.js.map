{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiffExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategoriesInInput","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","useFetchGifs","GiffExpertApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCJDQ,EAAc,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,qBAA2B,EAGjBC,mBAAS,IAHQ,mBAG9CC,EAH8C,KAGlCC,EAHkC,KAsBrD,OAEK,sBAAMC,SAfU,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAsB,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAC/CN,EAAc,MASjB,SACG,uBACIO,KAAK,OACLC,MAAUT,EACVU,SAvBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEjBC,EAFiB,iDAE+BC,UAAUH,GAFzC,+DAIJI,MAAOF,GAJH,cAIjBG,EAJiB,gBAMFA,EAAKC,OANH,uBAMhBC,EANgB,EAMhBA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC7B,MAAM,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAZX,kBAiBhBL,GAjBgB,4CAAH,sDCEPQ,EAAc,SAAC,GAAqB,EAApBL,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGpC,OACI,sBAAKI,UAAU,2CAAf,UACI,qBAAKC,IAAML,EAAKM,IAAOP,IACvB,oBAAGK,UAAU,OAAb,cAAsBL,EAAtB,WCJCQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAK,GACLc,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAmBvC,OAXAC,qBAAU,WAENzB,EAAQC,GAAUtB,MAAK,SAAAgC,GACfa,EAAS,CACLhB,KAAMG,EACNW,SAAS,SAIrB,CAACrB,IAEEsB,EDhBwBG,CAAczB,GAAjCc,EAFyB,EAE9BP,KAAac,EAFiB,EAEjBA,QAKpB,OACI,qCAEK,qBAAIJ,UAAU,oCAAd,cAAoDjB,EAApD,OACQqB,GAAW,mBAAGJ,UAAU,mCAAb,wBACnB,qBAAKA,UAAW,aAAhB,SAEOH,EAAOL,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAIKA,GAHGA,EAAIC,aEfvBe,EAAgB,WAAO,IAAD,EAEMxC,mBAAS,CAAC,SAFhB,mBAEvByC,EAFuB,KAEXC,EAFW,KAK/B,OACI,qCACI,gDACA,cAAC,EAAD,CAAa3C,qBAAwB2C,IACrC,uBAEA,6BAEID,EAAWlB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAYA,GADLA,YCb/B6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.5cd5184f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategoriesInInput} ) => {\r\n\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setinputValue(e.target.value);\r\n    } \r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); //para prevenir el reinicio de la pagina\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategoriesInInput( cats => [ inputValue, ...cats] );\r\n            setinputValue('');\r\n        }\r\n\r\n       \r\n    }\r\n\r\n    /*----- HTML----- */\r\n    return (\r\n  \r\n         <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n         </form>\r\n      \r\n    )\r\n    /*----- FIN HTML----- */\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategoriesInInput: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n    // utilizamos encodeURI para que la categoria sea apta para el enlace\r\nconst URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4hGMfmTa4mKEzFk2A2ZtLEVVXg362LJt`\r\n\r\nconst resp = await fetch( URL );\r\n\r\nconst {data} = await resp.json();\r\n\r\nconst gifs = data.map(img => {\r\nreturn{\r\nid: img.id,\r\ntitle: img.title,\r\nurl: img.images?.downsized_medium.url\r\n}\r\n} )\r\n\r\n\r\nreturn gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__zoomInUp\" >\r\n            <img src= {url} alt = {title} ></img>\r\n            <p className=\"card\"> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n   \r\n\r\n  \r\n\r\n    return (\r\n        <>\r\n           \r\n             <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n                    {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n             <div className= \"card-grid \">\r\n                {\r\n                    images.map( img  =>\r\n                        <GifGridItem \r\n                         key = {img.id}\r\n                         //al utilizar el spread enviamos las propeidades de la iamgen de\r\n                         // manera independiente\r\n                         {...img}\r\n                        />  \r\n                     )\r\n                } \r\n            \r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(()=> {\r\n\r\n        getGifs(category).then(img =>{\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                });\r\n        })\r\n\r\n     }, [category] ) \r\n\r\n    return state; // {data:[],loading: true};\r\n    \r\n}","import React,{ useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GiffExpertApp = () => {\r\n\r\n     const [categories, setCategories] = useState(['Taco'])\r\n\r\n \r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategoriesInInput = {setCategories} />\r\n            <hr/>\r\n            \r\n            <ol>\r\n            {\r\n                categories.map( category =>( \r\n                    // le damos un key al elemento para saber cual es (solicitado por react) en este caso el nombre mismo de la linea\r\n                    <GifGrid\r\n                        key = {category}\r\n                        category = {category} \r\n                    />)\r\n                   \r\n                )\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport { GiffExpertApp } from './GiffExpertApp';\n\nReactDOM.render(\n    \n    <GiffExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}